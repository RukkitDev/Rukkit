/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF8'
final def RUKKIT_VERSION = "0.9.4-dev"
mainClassName = 'cn.rukkit.RukkitLauncher'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    // compile 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.41'
    implementation 'org.jline:jline-terminal:3.25.0'
    implementation 'org.jline:jline-console:3.25.0'
    implementation 'org.jline:jline:3.25.0'
    implementation 'org.jline:jline-reader:3.25.0'
    implementation 'org.jline:jline-terminal-jna:3.25.0'
    // https://mvnrepository.com/artifact/io.netty/netty-all
    implementation 'io.netty:netty-all:4.1.100.Final'
    implementation 'ch.qos.logback:logback-core:1.4.14'
    implementation 'ch.qos.logback:logback-classic:1.4.12'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.yaml:snakeyaml:2.0'


    //compile 'netty'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('buildRukkit') {
    dependsOn shadowJar
    doLast {
        println("Okay.Doing last step...")
        mkdir("./build/outputs")
        /*copy() {
            CopySpec copySpec ->
                from file("${rootDir}/libs")
                into "${rootDir}/build/outputs/libs"
        }*/
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/build/libs/Rukkit-all.jar")
                into "${rootDir}/build/outputs/"
                rename('Rukkit-all.jar', "Rukkit-${RUKKIT_VERSION}.jar")
        }
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/start.sh")
                into "${rootDir}/build/outputs/"
        }
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/start.bat")
                into "${rootDir}/build/outputs/"
        }
        replaceFileText(new File("${rootDir}/build/outputs/start.sh"), "\\{version\\}", RUKKIT_VERSION)
        replaceFileText(new File("${rootDir}/build/outputs/start.bat"), "\\{version\\}", RUKKIT_VERSION)
        println("""
          -- Well done! --
targetRukkitVersion: ${RUKKIT_VERSION}
Check the build/outputs to get the result.
""")
    }
}

static def replaceFileText(file, oldText, newText) {
    String text = file.text.replaceAll(oldText, newText)
    file.withPrintWriter { printWriter ->
        printWriter.print(text)
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'cn.rukkit.RukkitLauncher'
    }
}

shadowJar {

}

run {}


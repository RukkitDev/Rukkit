/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF8'
final def RUKKIT_VERSION = "0.8.0"
mainClassName = 'cn.rukkit.RukkitLauncher'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    // compile 'org.slf4j:slf4j-api:1.7.25'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compile 'netty'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task buildRukkit(dependsOn: jar) {
    doLast {
        println("Okay.Doing last step...")
        mkdir("./build/outputs")
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/libs")
                into "${rootDir}/build/outputs/libs"
        }
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/build/libs/Rukkit.jar")
                into "${rootDir}/build/outputs/"
                rename ('Rukkit.jar', "Rukkit-${RUKKIT_VERSION}.jar")
        }
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/start.sh")
                into "${rootDir}/build/outputs/";
        }
        copy() {
            CopySpec copySpec ->
                from file("${rootDir}/start.bat")
                into "${rootDir}/build/outputs/";
        }
        println("""
          -- Well done! --
targetRukkitVersion: ${RUKKIT_VERSION}
Check the build/outputs to get the result.
""")
    }
}

run {}

